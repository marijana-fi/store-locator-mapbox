{"version":3,"sources":["helpers.js","components/single location list/SingleLocation.js","components/pins/Pins.js","components/popup/InfoWindow.js","components/location details/LocationDetails.js","App.js","serviceWorker.js","index.js"],"names":["dateObj","d","parts","split","date","Date","pop","toLowerCase","setHours","shift","setMinutes","hours","getHours","minutes","getMinutes","ampm","formatAMPM","SingleLocation","selected","location","setSelected","goToViewport","handleFocusChange","handleClick","geometry","coordinates","locationWrap","useRef","useEffect","current","scrollIntoView","behavior","block","startTime","properties","endTime","now","startDate","endDate","temp","open","className","tabIndex","role","aria-pressed","ref","onClick","onKeyDown","e","keyCode","Title","Pins","locations","map","key","Location","Address","latitude","longitude","preventDefault","src","alt","InfoWindow","openLocation","closeLocation","closeOnClick","onClose","window","LocationDetails","App","useState","data","features","zoom","innerWidth","width","height","viewport","setViewport","setOpen","listener","addEventListener","removeEventListener","onViewportChange","element","focus","transitionInterpolator","FlyToInterpolator","speed","transitionDuration","mapboxApiAccessToken","process","mapStyle","style","position","right","top","positionOptions","enableHighAccuracy","trackUserLocation","left","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.08e74c53.chunk.js","sourcesContent":["export function dateObj(d) {\n\t// date parser ...\n\tconst parts = d.split(/:|\\s/);\n\tconst date = new Date();\n\tif (parts.pop().toLowerCase() === \"pm\") parts[0] = +parts[0] + 12;\n\tdate.setHours(+parts.shift());\n\tdate.setMinutes(+parts.shift());\n\treturn date;\n}\n\nfunction formatAMPM(date) {\n\tvar hours = date.getHours();\n\tvar minutes = date.getMinutes();\n\tvar ampm = hours >= 12 ? \"PM\" : \"AM\";\n\thours = hours % 12;\n\thours = hours ? hours : 12;\n\tminutes = minutes < 10 ? \"0\" + minutes : minutes;\n\tvar strTime = hours + \":\" + minutes + \" \" + ampm;\n\treturn strTime;\n}\nconst now = formatAMPM(new Date());\n","import React, { useRef, useEffect } from \"react\";\n\nimport \"./single-location.scss\";\nimport { dateObj } from \"./../../helpers.js\";\nexport default function SingleLocation({\n\tselected,\n\tlocation,\n\tsetSelected,\n\tgoToViewport,\n\thandleFocusChange\n}) {\n\tconst handleClick = location => {\n\t\tsetSelected(location);\n\t\tgoToViewport(\n\t\t\tlocation.geometry.coordinates[1],\n\t\t\tlocation.geometry.coordinates[0]\n\t\t);\n\t};\n\tconst locationWrap = useRef(null);\n\n\tuseEffect(() => {\n\t\tif (location === selected) {\n\t\t\thandleFocusChange(locationWrap);\n\t\t\tlocationWrap.current.scrollIntoView({\n\t\t\t\tbehavior: \"smooth\",\n\t\t\t\tblock: \"center\"\n\t\t\t});\n\t\t}\n\t}, [selected, setSelected]);\n\n\tconst startTime = location.properties.hours.startTime;\n\tconst endTime = location.properties.hours.endTime;\n\tconst now = new Date();\n\n\tlet startDate = dateObj(startTime); // get date objects\n\tlet endDate = dateObj(endTime);\n\n\tif (startDate > endDate) {\n\t\t// check if start comes before end\n\t\tconst temp = startDate; // if so, assume it's across midnight\n\t\tstartDate = endDate; // and swap the dates\n\t\tendDate = temp;\n\t}\n\n\tconst time = now < endDate && now > startDate ? \"open\" : \"closed\"; // compare\n\n\tconst open = now < endDate && now > startDate; // compare\n\tconst closed = now > endDate && now < startDate;\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"location-wrap \"\n\t\t\ttabIndex=\"0\"\n\t\t\trole=\"button\"\n\t\t\taria-pressed=\"true\"\n\t\t\tref={locationWrap}\n\t\t\tonClick={() => handleClick(location)}\n\t\t\tonKeyDown={e => (e.keyCode === 13 ? handleClick(location) : null)}\n\t\t>\n\t\t\t<div className=\"info\">\n\t\t\t\t<h2 className=\"location-name\">{location.properties.Title}</h2>\n\t\t\t\t<div className=\"hours-wrap\">\n\t\t\t\t\t<h4>\n\t\t\t\t\t\tWorking hours:{\" \"}\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t{location.properties.hours.startTime} -{\" \"}\n\t\t\t\t\t\t\t{location.properties.hours.endTime}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</h4>\n\t\t\t\t\t<div className={`hours ${open ? \"open\" : \"\"} `}>\n\t\t\t\t\t\t{open ? \"open\" : \"closed\"}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\nimport \"./pins.scss\";\n\nimport { Marker } from \"react-map-gl\";\n\nexport default function Pins({ locations, setSelected, goToViewport }) {\n\treturn (\n\t\t<div>\n\t\t\t{locations.map(location => {\n\t\t\t\treturn (\n\t\t\t\t\t<Marker\n\t\t\t\t\t\tkey={location.properties.Location.Address}\n\t\t\t\t\t\tlatitude={location.geometry.coordinates[1]}\n\t\t\t\t\t\tlongitude={location.geometry.coordinates[0]}\n\t\t\t\t\t>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"pin\"\n\t\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\tsetSelected(location);\n\n\t\t\t\t\t\t\t\tgoToViewport(\n\t\t\t\t\t\t\t\t\tlocation.geometry.coordinates[1],\n\t\t\t\t\t\t\t\t\tlocation.geometry.coordinates[0]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<img src=\"/img/pin.svg\" alt=\"\" />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</Marker>\n\t\t\t\t);\n\t\t\t})}\n\t\t</div>\n\t);\n}\n","import React from \"react\";\nimport \"./info-window.scss\";\n\nimport { Popup } from \"react-map-gl\";\n\nexport default function InfoWindow({\n\tselected,\n\tsetSelected,\n\topenLocation,\n\tcloseLocation\n}) {\n\tconst handleClick = () => {\n\t\topenLocation();\n\t};\n\n\treturn (\n\t\t<Popup\n\t\t\tlatitude={selected.geometry.coordinates[1]}\n\t\t\tlongitude={selected.geometry.coordinates[0]}\n\t\t\tcloseOnClick={false}\n\t\t\tonClose={() => {\n\t\t\t\tsetSelected(null);\n\t\t\t\tcloseLocation();\n\t\t\t}}\n\t\t>\n\t\t\t<div className=\"info-wrap\">\n\t\t\t\t<h3 className=\"location-name\">{selected.properties.Title}</h3>\n\t\t\t\t<h5>{selected.properties.Location.Address}</h5>\n\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"button directions\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\twindow.open(\n\t\t\t\t\t\t\t`https://www.google.com/maps?saddr=My+Location&daddr=${selected.geometry.coordinates[1]},${selected.geometry.coordinates[0]}`,\n\t\t\t\t\t\t\t\"_blank\"\n\t\t\t\t\t\t);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tGet Directions\n\t\t\t\t</button>\n\t\t\t\t<button className=\"button view-store\" onClick={handleClick}>\n\t\t\t\t\tView Store\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</Popup>\n\t);\n}\n","import React from \"react\";\nimport \"./location-detail.scss\";\n\nexport default function LocationDetails({ selected, open, closeLocation }) {\n\tconst handleClick = () => {\n\t\tcloseLocation();\n\t};\n\n\treturn selected ? (\n\t\t<div className={`details-wrap ${open ? \"open\" : \"\"} `}>\n\t\t\t<button className=\"close\" onClick={handleClick}>\n\t\t\t\t&times;\n\t\t\t</button>\n\t\t\t<h2 className=\"location-name\">{selected.properties.Title}</h2>\n\t\t\t<div className=\"store-info\">\n\t\t\t\t<div className=\"address\">\n\t\t\t\t\t<h3>Location:</h3>\n\t\t\t\t\t<h4>{selected.properties.Location.Address}</h4>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"hours\">\n\t\t\t\t\t<h3>Store Hours:</h3>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t{selected.properties.hours.startTime} -{\" \"}\n\t\t\t\t\t\t{selected.properties.hours.endTime}\n\t\t\t\t\t</h4>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<img src=\"img/nike-store.webp\" alt=\"\" />\n\t\t\t</div>\n\t\t</div>\n\t) : null;\n}\n","import data from \"./nike-stores.json\";\nimport React, { useState, useEffect } from \"react\";\nimport ReactMapGl, {\n\tFlyToInterpolator,\n\tGeolocateControl,\n\tNavigationControl\n} from \"react-map-gl\";\nimport \"./App.scss\";\nimport SingleLocation from \"./components/single location list/SingleLocation\";\nimport Pins from \"./components/pins/Pins\";\nimport InfoWindow from \"./components/popup/InfoWindow\";\nimport LocationDetails from \"./components/location details/LocationDetails\";\n\nconst MAPBOX_TOKEN = process.env.REACT_APP_TOKEN;\n\nfunction App() {\n\tconst [locations, setLocations] = useState(data.features);\n\tconst [viewport, setViewport] = useState({\n\t\tlatitude: 49.0555,\n\t\tlongitude: 10.4376,\n\t\tzoom: window.innerWidth < 480 ? 3 : 3.5,\n\t\twidth: window.innerWidth < 480 ? \"100vw\" : \"50vw\",\n\t\theight: window.innerWidth < 480 ? \"50vh\" : \"100vh\"\n\t});\n\tconst [selected, setSelected] = useState(null);\n\tconst [open, setOpen] = useState(false);\n\n\tuseEffect(() => {\n\t\tconst listener = e => {\n\t\t\tif (e.key === \"Escape\") {\n\t\t\t\tsetSelected(null);\n\t\t\t}\n\t\t};\n\t\twindow.addEventListener(\"keydown\", listener);\n\t\treturn () => {\n\t\t\twindow.removeEventListener(\"keydown\", listener);\n\t\t};\n\t}, []);\n\n\tconst onViewportChange = viewport => {\n\t\tsetViewport(viewport);\n\t};\n\n\tconst handleFocusChange = element => {\n\t\telement.current.focus();\n\t};\n\n\tconst goToViewport = (latitude, longitude) => {\n\t\tonViewportChange({\n\t\t\tlatitude,\n\t\t\tlongitude,\n\t\t\tzoom: window.innerWidth < 480 ? 5 : 6,\n\t\t\twidth: window.innerWidth < 480 ? \"100vw\" : \"50vw\",\n\t\t\theight: window.innerWidth < 480 ? \"50vh\" : \"100vh\",\n\t\t\ttransitionInterpolator: new FlyToInterpolator({ speed: 1.2 }),\n\t\t\ttransitionDuration: \"auto\"\n\t\t});\n\t};\n\n\tconst openLocation = () => {\n\t\tsetOpen(true);\n\t};\n\tconst closeLocation = () => {\n\t\tsetOpen(false);\n\t};\n\treturn (\n\t\t<div className=\"layout\">\n\t\t\t<ReactMapGl\n\t\t\t\t{...viewport}\n\t\t\t\tmapboxApiAccessToken={MAPBOX_TOKEN}\n\t\t\t\tmapStyle=\"mapbox://styles/majafl/ck8agzeeh0jpz1ilg7zm6j1ae\"\n\t\t\t\tonViewportChange={onViewportChange}\n\t\t\t>\n\t\t\t\t<div style={{ position: \"absolute\", right: 10, top: 10 }}>\n\t\t\t\t\t<NavigationControl />\n\t\t\t\t</div>\n\t\t\t\t<GeolocateControl\n\t\t\t\t\tpositionOptions={{ enableHighAccuracy: true }}\n\t\t\t\t\ttrackUserLocation={true}\n\t\t\t\t\tstyle={{ position: \"absolute\", left: 10, top: 10 }}\n\t\t\t\t/>\n\t\t\t\t<Pins\n\t\t\t\t\tlocations={locations}\n\t\t\t\t\tsetSelected={setSelected}\n\t\t\t\t\tgoToViewport={goToViewport}\n\t\t\t\t\thandleFocusChange={handleFocusChange}\n\t\t\t\t/>\n\t\t\t\t{selected ? (\n\t\t\t\t\t<InfoWindow\n\t\t\t\t\t\tselected={selected}\n\t\t\t\t\t\tsetSelected={setSelected}\n\t\t\t\t\t\topenLocation={openLocation}\n\t\t\t\t\t\tcloseLocation={closeLocation}\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\t\t\t</ReactMapGl>\n\n\t\t\t<div className=\"locations-wrap\">\n\t\t\t\t{locations.map(location => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<SingleLocation\n\t\t\t\t\t\t\tselected={selected}\n\t\t\t\t\t\t\tlocation={location}\n\t\t\t\t\t\t\tsetSelected={setSelected}\n\t\t\t\t\t\t\tkey={location.geometry.coordinates}\n\t\t\t\t\t\t\tgoToViewport={goToViewport}\n\t\t\t\t\t\t\thandleFocusChange={handleFocusChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t\t<LocationDetails\n\t\t\t\tselected={selected}\n\t\t\t\topen={open}\n\t\t\t\tcloseLocation={closeLocation}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}